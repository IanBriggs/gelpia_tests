# minimum: 29.1233746910638
#    type: provisional
#   input: T=30.0
#          u=120.0
#          v=320.0

# maximum: 734.093907543916
#    type: provisional
#   input: T=-50.0
#          u=-30.0
#          v=20300.0

var:
T = [-50.0, 30.0];
u = [-30.0, 120.0];
v = [320.0, 20300.0];

cost:
(abs((([5.0, 5.0] * (((((((([10.0, 10.0] * (abs(v))) * (abs((([3.0, 3.0] * T) + [1657.0, 1657.0])))) * (abs(((([3.0, 3.0] * T) + ([5.0, 5.0] * u)) + [1657.0, 1657.0])))) + (([3.27680000000000000000e+04, 3.27680000000000000000e+04] * (abs((([3.0, 3.0] * T) + [1657.0, 1657.0])))) * (abs(((([3.0, 3.0] * T) + ([5.0, 5.0] * u)) + [1657.0, 1657.0]))))) + ((([2.00000000000000000000e+00, 2.00000000000000000000e+00] * (abs(v))) * (abs((([3.0, 3.0] * T) + [1657.0, 1657.0])))) * (abs(((([3.0, 3.0] * T) - ([5.0, 5.0] * u)) + [1657.0, 1657.0]))))) + ((([1.10000000000000000000e+01, 1.10000000000000000000e+01] * (abs(v))) * (abs(T))) * (abs(((([3.0, 3.0] * T) - ([5.0, 5.0] * u)) + [1657.0, 1657.0]))))) + (([2.75200000000000000000e+03, 2.75200000000000000000e+03] * (abs(v))) * (abs(((([3.0, 3.0] * T) - ([5.0, 5.0] * u)) + [1657.0, 1657.0]))))) + (([1.28000000000000000000e+03, 1.28000000000000000000e+03] * (abs(v))) * (abs((([3.0, 3.0] * T) + [1657.0, 1657.0])))))) / (([2.00000000000000000000e+00, 2.00000000000000000000e+00] * pow(((([3.0, 3.0] * T) + ([5.0, 5.0] * u)) + [1657.0, 1657.0]), 2)) * (abs(((([3.0, 3.0] * T) + ([5.0, 5.0] * u)) + [1657.0, 1657.0])))))))

